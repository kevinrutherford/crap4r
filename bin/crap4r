#!/usr/bin/env ruby
#
# Crap4r computes the CRAP metric for the methods in a given set of source files.
# Visit http://github.com/kevinrutherford/crap4r/tree for docs etc.
#
# Author: Kevin Rutherford
#

require 'rubygems'
require 'rcov'
require 'ruby_parser'

class CrapFile
  attr_accessor :name, :methods
  
  def initialize(filename)
    @name = filename
  end

  def add_method(method)
    @methods ||= []
    @methods << method
  end
end

class CrapMethod
  COMPLEXITY_NODE_TYPES = [:if, :while, :until, :for, :rescue, :case, :when, :and, :or]

  attr_accessor :name, :start_line, :end_line, :complexity

  def initialize(sexp)
    @name = sexp[1]
    @start_line = sexp.line
    @end_line = sexp.last.line
    @complexity = count_complexity(sexp)
  end

  private

  def count_complexity(node)
    count_branches(node) + 1
  end

  def count_branches(node)
    count = 0
    count = count + 1 if COMPLEXITY_NODE_TYPES.include? node.node_type
    node.children.each {|node| count += count_branches(node)}
    count
  end
end

@crap_files = []

def process(sexp, crap_file)
  if [:defn, :defs].include?(sexp.first)
    crap_method = CrapMethod.new(sexp)
    crap_file.add_method(crap_method)
  end
  sexp.children.each {|child| process(child, crap_file)}
end



$rcov_code_coverage_analyzer ||= Rcov::CodeCoverageAnalyzer.new


require 'spec/expectations'
require 'spec/example'


require 'spec/deprecation'
require 'spec/ruby'
require 'spec/dsl'
require 'spec/runner'

override_run = lambda do
    oldrun = instance_method(:run)
    define_method(:run) do |*args|
      $rcov_code_coverage_analyzer.run_hooked { oldrun.bind(self).call(*args) }
    end
end
if defined? Spec::DSL::Example
    Spec::DSL::Example.instance_eval(&override_run)
elsif defined? Spec::Example::ExampleGroupMethods
    Spec::Example::ExampleGroupMethods.instance_eval(&override_run)
else
    $stderr.puts <<-EOF
Your RSpec version isn't supported. If it's a old one, consider upgrading;
otherwise, please report the problem.
    EOF
    exit(-1)
end

Dir['spec/**/*_spec.rb'].each {|spec| load spec}
::Spec::Runner::CommandLine.run


#$rcov_code_coverage_analyzer.dump_coverage_info(formatters)

files = $rcov_code_coverage_analyzer.analyzed_files

require 'pathname'

files = files.reject {|f|
  f =~ /\A#{Regexp.escape(Pathname.new(Config::CONFIG["libdir"]).cleanpath.to_s)}/
}.reject {|f| f =~ /_spec\.rb/}.sort


files.each do |filename|
  crap_file = CrapFile.new(filename)
  @crap_files << crap_file
  code = IO.readlines(filename).join
  sexp = RubyParser.new.parse(code, filename) || s()
  process(sexp, crap_file)
end

@crap_files.each do |file|
  puts file.name
  file.methods.each do |method|
    puts "  lines #{method.start_line}-#{method.end_line}. CC #{method.complexity}. #{method.name}"
  end
end
#puts "#{sexp.file}.#{sexp[1]} --> #{Cyc.new.cyc(sexp)}"


