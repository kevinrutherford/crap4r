#!/usr/bin/env ruby
#
# Crap4r computes the CRAP metric for the methods in a given set of source files.
# Visit http://github.com/kevinrutherford/crap4r/tree for docs etc.
#
# Author: Kevin Rutherford
#

require 'rubygems'
require 'rcov'
require 'ruby_parser'
require 'roodi/core'
require 'roodi/checks'

class Cyc < Roodi::Checks::CyclomaticComplexityCheck
  def initialize
    super(0)
  end

  def cyc(sexp)
    count_complexity(sexp)
  end
end

def process(sexp)
  if [:defn, :defs].include?(sexp.first)
    puts "#{sexp.file}.#{sexp[1]} --> #{Cyc.new.cyc(sexp)}"
  end
  sexp.children.each {|child| process(child)}
end



$rcov_code_coverage_analyzer ||= Rcov::CodeCoverageAnalyzer.new


require 'spec/expectations'
require 'spec/example'


require 'spec/deprecation'
require 'spec/ruby'
require 'spec/dsl'
require 'spec/runner'

override_run = lambda do
    oldrun = instance_method(:run)
    define_method(:run) do |*args|
      $rcov_code_coverage_analyzer.run_hooked { oldrun.bind(self).call(*args) }
    end
end
if defined? Spec::DSL::Example
    Spec::DSL::Example.instance_eval(&override_run)
elsif defined? Spec::Example::ExampleGroupMethods
    Spec::Example::ExampleGroupMethods.instance_eval(&override_run)
else
    $stderr.puts <<-EOF
Your RSpec version isn't supported. If it's a old one, consider upgrading;
otherwise, please report the problem.
    EOF
    exit(-1)
end

Dir['spec/**/*_spec.rb'].each {|spec| load spec}
::Spec::Runner::CommandLine.run


#$rcov_code_coverage_analyzer.dump_coverage_info(formatters)

files = $rcov_code_coverage_analyzer.analyzed_files

require 'pathname'

files = files.reject {|f|
  f =~ /\A#{Regexp.escape(Pathname.new(Config::CONFIG["libdir"]).cleanpath.to_s)}/
}.reject {|f| f =~ /_spec\.rb/}.sort


files.each do |filename|
  code = IO.readlines(filename).join
  sexp = RubyParser.new.parse(code, filename) || s()
  process(sexp)
end




